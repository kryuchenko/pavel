#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –≤ PAVEL
"""

import asyncio
import numpy as np
from pavel.embeddings.embedding_pipeline import EmbeddingPipeline, PipelineConfig
from pavel.embeddings.semantic_search import SemanticSearchEngine
from pavel.embeddings.vector_store import SimilarityMetric
from pavel.embeddings.embedding_generator import SupportedModels

async def test_similarity_tuning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –±–ª–∏–∑–æ—Å—Ç–∏"""
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –ë–õ–ò–ó–û–°–¢–ò")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    pipeline = EmbeddingPipeline(PipelineConfig(
        embedding_model=SupportedModels.E5_SMALL_MULTILINGUAL.value
    ))
    
    search_engine = pipeline.semantic_search
    
    print("üéØ –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: 'app crashes and freezes'")
    print("-" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –±–ª–∏–∑–æ—Å—Ç–∏
    thresholds = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]
    
    for threshold in thresholds:
        print(f"\nüìä –ü–æ—Ä–æ–≥ –±–ª–∏–∑–æ—Å—Ç–∏: {threshold:.1f}")
        
        results = search_engine.search_similar_reviews(
            query_text="app crashes and freezes",
            limit=5,
            min_similarity=threshold
        )
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        for i, result in enumerate(results[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
            print(f"   {i}. [{result.similarity_score:.3f}] {result.text[:70]}...")
    
    print("\n" + "=" * 60)
    print("üåç –ö–†–û–°–°-–Ø–ó–´–ö–û–í–ê–Ø –ë–õ–ò–ó–û–°–¢–¨")
    print("-" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å-—è–∑—ã–∫–æ–≤–æ–π –ø–æ–∏—Å–∫
    cross_language_queries = [
        ("crashes", "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
        ("–≥–ª—é—á–∏—Ç", "–Ω–∞ —Ä—É—Å—Å–∫–æ–º"), 
        ("problemas", "–Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º"),
        ("–ø—Ä–æ–±–ª–µ–º—ã", "–Ω–∞ —Ä—É—Å—Å–∫–æ–º"),
        ("excellent", "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
        ("–æ—Ç–ª–∏—á–Ω–æ–µ", "–Ω–∞ —Ä—É—Å—Å–∫–æ–º")
    ]
    
    for query, lang in cross_language_queries:
        print(f"\nüîç –ü–æ–∏—Å–∫ '{query}' ({lang}):")
        
        results = search_engine.search_similar_reviews(
            query_text=query,
            limit=3,
            min_similarity=0.5
        )
        
        for i, result in enumerate(results, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            lang_detect = "üá∑üá∫" if any(c in "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è" for c in result.text.lower()) else \
                         "üá™üá∏" if any(word in result.text.lower() for word in ["aplicaci√≥n", "excelente", "problemas"]) else \
                         "üáßüá∑" if any(word in result.text.lower() for word in ["aplicativo", "muito", "bom"]) else \
                         "üá∏üá¶" if any(c in "ÿßÿ®ÿ™ÿ´ÿ¨ÿ≠ÿÆÿØÿ∞ÿ±ÿ≤ÿ≥ÿ¥ÿµÿ∂ÿ∑ÿ∏ÿπÿ∫ŸÅŸÇŸÉŸÑŸÖŸÜŸáŸàŸä" for c in result.text) else "üá∫üá∏"
            
            print(f"   {i}. {lang_detect} [{result.similarity_score:.3f}] {result.text[:60]}...")

async def test_advanced_similarity_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏"""
    print("\n" + "=" * 60) 
    print("‚öôÔ∏è  –ü–†–û–î–í–ò–ù–£–¢–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–õ–ò–ó–û–°–¢–ò")
    print("-" * 60)
    
    # –†–∞–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏
    metrics = [
        (SimilarityMetric.COSINE, "–ö–æ—Å–∏–Ω—É—Å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å"),
        (SimilarityMetric.DOT_PRODUCT, "–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"),
        (SimilarityMetric.EUCLIDEAN, "–ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
    ]
    
    from pavel.embeddings.vector_store import VectorStore, VectorStoreConfig
    
    query_text = "app is great and works perfectly"
    
    for metric, name in metrics:
        print(f"\nüìê {name}:")
        
        # –°–æ–∑–¥–∞–µ–º vector store —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        config = VectorStoreConfig(
            similarity_metric=metric,
            collection_name="review_embeddings"
        )
        
        vector_store = VectorStore(config)
        
        # –ü–æ–ª—É—á–∞–µ–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        from pavel.embeddings.embedding_generator import EmbeddingGenerator, EmbeddingConfig
        generator = EmbeddingGenerator(EmbeddingConfig(
            model_name=SupportedModels.E5_SMALL_MULTILINGUAL.value
        ))
        
        query_embedding = generator.generate_single(query_text)
        
        # –ü–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        from pavel.embeddings.vector_store import SearchQuery
        search_query = SearchQuery(
            vector=query_embedding.embedding,
            limit=3,
            min_similarity=0.3
        )
        
        results = vector_store.search_similar(search_query)
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        for i, result in enumerate(results, 1):
            print(f"   {i}. [{result.score:.3f}] {result.text[:50]}...")

async def demo_similarity_use_cases():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏"""
    print("\n" + "=" * 60)
    print("üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–õ–£–ß–ê–ò –ù–ê–°–¢–†–û–ô–ö–ò")
    print("-" * 60)
    
    pipeline = EmbeddingPipeline()
    search_engine = pipeline.semantic_search
    
    use_cases = [
        {
            "name": "üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)",
            "threshold": 0.85,
            "query": "app crashes during startup",
            "description": "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—á—Ç–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
        },
        {
            "name": "üêõ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–±–ª–µ–º (—Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å)", 
            "threshold": 0.65,
            "query": "payment problems",
            "description": "–î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ö–æ–∂–∏—Ö –ø—Ä–æ–±–ª–µ–º"
        },
        {
            "name": "üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏–∫ (–Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)",
            "threshold": 0.45,
            "query": "user interface",
            "description": "–î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º"
        },
        {
            "name": "üåç –ö—Ä–æ—Å—Å-—è–∑—ã–∫–æ–≤–æ–π –ø–æ–∏—Å–∫",
            "threshold": 0.55,
            "query": "good application",
            "description": "–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —è–∑—ã–∫–∞–º"
        }
    ]
    
    for case in use_cases:
        print(f"\n{case['name']}")
        print(f"   –ü–æ—Ä–æ–≥: {case['threshold']}")
        print(f"   –ó–∞–ø—Ä–æ—Å: '{case['query']}'")
        print(f"   –¶–µ–ª—å: {case['description']}")
        
        results = search_engine.search_similar_reviews(
            query_text=case['query'],
            limit=3,
            min_similarity=case['threshold']
        )
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for i, result in enumerate(results, 1):
            print(f"   {i}. [{result.similarity_score:.3f}] {result.text[:55]}...")

async def show_configuration_options():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\n" + "=" * 60)
    print("‚öôÔ∏è  –î–û–°–¢–£–ü–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–õ–ò–ó–û–°–¢–ò")
    print("-" * 60)
    
    print("""
üéõÔ∏è  –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–ò–°–ö–ê:

1. min_similarity (0.0-1.0):
   ‚Ä¢ 0.9+ : –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
   ‚Ä¢ 0.8-0.9 : –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ –æ—Ç–∑—ã–≤—ã  
   ‚Ä¢ 0.7-0.8 : –ü–æ—Ö–æ–∂–∏–µ –æ—Ç–∑—ã–≤—ã
   ‚Ä¢ 0.6-0.7 : –°—Ö–æ–∂–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
   ‚Ä¢ 0.5-0.6 : –û–±—â–∏–µ —Ç–µ–º—ã
   ‚Ä¢ 0.3-0.5 : –®–∏—Ä–æ–∫–∏–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
   ‚Ä¢ 0.1-0.3 : –û—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫

2. limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤):
   ‚Ä¢ 1-10 : –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   ‚Ä¢ 10-50 : –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   ‚Ä¢ 50-100 : –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑

3. –ú–µ—Ç—Ä–∏–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏:
   ‚Ä¢ COSINE : –£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
   ‚Ä¢ DOT_PRODUCT : –°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ  
   ‚Ä¢ EUCLIDEAN : –ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
   ‚Ä¢ MANHATTAN : –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

4. –ú–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:
   ‚Ä¢ E5-small : –ë—ã—Å—Ç—Ä–æ, 384D (—Ç–µ–∫—É—â–∞—è)
   ‚Ä¢ E5-base : –ë–∞–ª–∞–Ω—Å, 768D  
   ‚Ä¢ E5-large : –¢–æ—á–Ω–æ, 1024D
   ‚Ä¢ OpenAI ada-002 : 1536D (API)

5. –§–∏–ª—å—Ç—Ä—ã:
   ‚Ä¢ –ü–æ —è–∑—ã–∫—É : language='ru'
   ‚Ä¢ –ü–æ –¥–∞—Ç–µ : created_after='2024-01-01'
   ‚Ä¢ –ü–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é : app_id='specific_app'
   ‚Ä¢ –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É : rating>=4

üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï:

‚Ä¢ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: threshold=0.85+
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º: threshold=0.65-0.75  
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: threshold=0.55-0.65
‚Ä¢ –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤: threshold=0.45-0.55
‚Ä¢ –®–∏—Ä–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: threshold=0.35-0.45
""")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    await test_similarity_tuning()
    await test_advanced_similarity_config() 
    await demo_similarity_use_cases()
    await show_configuration_options()
    
    print("\n" + "=" * 60)
    print("üéâ –í–´–í–û–î: –ë–ª–∏–∑–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –≥–∏–±–∫–æ!")
    print("üîß –ú–æ–∂–Ω–æ —Ç–æ—á–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    print("üåç –†–∞–±–æ—Ç–∞–µ—Ç across —è–∑—ã–∫–æ–≤ –∏ –∫—É–ª—å—Ç—É—Ä")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())